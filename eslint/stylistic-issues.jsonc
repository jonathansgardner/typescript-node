{
  "rules": {
    /* enforce linebreaks after opening and before closing array brackets */
    "array-bracket-newline": [
      "error",
      { "multiline": true }
    ],

    /* enforce consistent spacing inside array brackets */
    "array-bracket-spacing": [
      "error",
      "always"
    ],

    /* enforce line breaks after each array element */
    "array-element-newline": [
      "error",
      {
        "multiline": true,
        "minItems": 3
      }
    ],

    /* disallow or enforce spaces inside of blocks after opening block and before closing block */
    "block-spacing": "error",

    /* enforce consistent brace style for blocks */
    "brace-style": [
      "error",
      "1tbs",
      { "allowSingleLine": true }
    ],

    /* enforce camelcase naming convention */
    "camelcase": "error",

    /* enforce or disallow capitalization of the first letter of a comment */
    "capitalized-comments": "off",

    /*require or disallow trailing commas */
    "comma-dangle": [
      "error",
      "never"
    ],

    /* Enforces spacing around commas */
    "comma-spacing": "error",

    /* enforce consistent comma style */
    "comma-style": "error",

    /* enforce consistent spacing inside computed property brackets */
    "computed-property-spacing": [
      "error",
      "always"
    ],

    /* enforce consistent naming when capturing the current execution context */
    "consistent-this": "off",

    /* require or disallow newline at the end of files */
    "eol-last": "error",

    /* require or disallow spacing between function identifiers and their invocations */
    "func-call-spacing": "error",

    /* require function names to match the name of the variable or property to which they are assigned */
    "func-name-matching": [
      "error",
      {
        "considerPropertyDescriptor": true,
        "includeCommonJSModuleExports": true
      }
    ],

    /* require or disallow named `function` expressions */
    "func-names": "off",

    /* enforce the consistent use of either `function` declarations or expressions */
    "func-style": [
      "error",
      "declaration",
      { "allowArrowFunctions": true }
    ],

    /* enforce line breaks between arguments of a function call */
    "function-call-argument-newline": [
      "error",
      "consistent"
    ],

    /* enforce consistent line breaks inside function parentheses */
    "function-paren-newline": [
      "error",
      "multiline-arguments"
    ],

    /* disallow specified identifiers */
    "id-denylist": "off",

    /* enforce minimum and maximum identifier lengths */
    "id-length": "off",

    /* require identifiers to match a specified regular expression */
    "id-match": "off",

    /* enforce the location of arrow function bodies */
    "implicit-arrow-linebreak": "error",

    /* enforce consistent indentation */
    "indent": [
      "error",
      2,
      {
        "SwitchCase": 1,
        "VariableDeclarator": {
          "var": 2,
          "let": 2,
          "const": 3
        },
        // doesn't seem to be working
        "offsetTernaryExpressions": true
      }
    ],

    /* enforce the consistent use of either double or single quotes in JSX attributes */
    "jsx-quotes": "error",

    /* enforce consistent spacing before and after keywords */
    "key-spacing": [
      "error",
      { "mode": "strict" }
    ],

    /* enforce consistent spacing before and after keywords */
    "keyword-spacing": "error",

    /* enforce position of line comments */
    "line-comment-position": "off",

    /* enforce consistent linebreak style */
    "linebreak-style": [
      "error",
      "unix"
    ],

    /* require empty lines around comments */
    "lines-around-comment": [
      "error",
      {
        "allowBlockStart": true,
        "allowClassStart": true,
        "allowObjectStart": true,
        "allowArrayStart": true
      }
    ],

    /* require or disallow an empty line between class members */
    "lines-between-class-members": [
      "error",
      "always",
      { "exceptAfterSingleLine": true }
    ],

    /* enforce a maximum depth that blocks can be nested */
    "max-depth": "warn",

    /* enforce a maximum line length */
    "max-len": [
      "error",
      {
        "code": 100,
        "tabWidth": 2,
        "ignoreUrls": true,
        "ignoreStrings": true,
        "ignoreTemplateLiterals": true,
        "ignoreRegExpLiterals": true
      }
    ],

    /* enforce a maximum number of lines per file */
    "max-lines": "off",

    /* enforce a maximum number of lines of code in a function */
    "max-lines-per-function": "off",

    /* enforce a maximum depth that callbacks can be nested */
    "max-nested-callbacks": "off",

    /* enforce a maximum number of parameters in function definitions */
    "max-params": [
      "error",
      3
    ],

    /* enforce a maximum number of statements allowed in function blocks */
    "max-statements": "off",

    /* enforce a maximum number of statements allowed per line */
    "max-statements-per-line": "error",

    /* enforce a particular style for multiline comments */
    "multiline-comment-style": [
      "error",
      "separate-lines"
    ],

    /* enforce newlines between operands of ternary expressions */
    "multiline-ternary": [
      "error",
      "always-multiline"
    ],

    /* require constructor names to begin with a capital letter */
    "new-cap": "error",

    /* enforce or disallow parentheses when invoking a constructor with no arguments */
    "new-parens": "error",

    /* require a newline after each call in a method chain */
    "newline-per-chained-call": [
      "error",
      { "ignoreChainWithDepth": 2 }
    ],

    /* disallow `Array` constructors */
    "no-array-constructor": "error",

    /* disallow bitwise operators */
    "no-bitwise": "off",

    /* disallow `continue` statements */
    "no-continue": "off",

    /* disallow inline comments after code */
    "no-inline-comments": "off",

    /* disallow `if` statements as the only statement in `else` blocks */
    "no-lonely-if": "error",

    /* disallow mixed binary operators */
    "no-mixed-operators": "error",

    /* disallow mixed spaces and tabs for indentation */
    "no-mixed-spaces-and-tabs": "error",

    /* disallow use of chained assignment expressions */
    "no-multi-assign": "error",

    /* disallow multiple empty lines */
    "no-multiple-empty-lines": [
      "error",
      {
        "max": 1,
        "maxBOF": 0
      }
    ],

    /* disallow negated conditions */
    "no-negated-condition": "warn",

    /* disallow nested ternary expressions */
    "no-nested-ternary": "off",

    /* disallow `Object` constructors */
    "no-new-object": "error",

    /* disallow the unary operators `++` and `--` */
    "no-plusplus": "error",

    /* disallow specified syntax */
    "no-restricted-syntax": "off",

    /* disallow all tabs */
    "no-tabs": "off",

    /* disallow ternary operators */
    "no-ternary": "off",

    /* disallow trailing whitespace at the end of lines */
    "no-trailing-spaces": "error",

    /* disallow dangling underscores in identifiers */
    "no-underscore-dangle": [
      "error",
      { "enforceInMethodNames": true }
    ],

    /* disallow ternary operators when simpler alternatives exist */
    "no-unneeded-ternary": [
      "error",
      { "defaultAssignment": false }
    ],

    /* disallow whitespace before properties */
    "no-whitespace-before-property": "error",

    /* enforce the location of single-line statements */
    "nonblock-statement-body-position": "error",

    /* enforce consistent line breaks after opening and before closing braces */
    "object-curly-newline": [
      "error",
      { "multiline": true }
    ],

    /* enforce consistent spacing inside braces */
    "object-curly-spacing": [
      "error",
      "always"
    ],

    /* enforce placing object properties on separate lines */
    "object-property-newline": [
      "error",
      { "allowAllPropertiesOnSameLine": true }
    ],

    /* enforce variables to be declared either together or separately in functions */
    "one-var": [
      "error",
      "never"
    ],

    /* require or disallow newlines around variable declarations */
    "one-var-declaration-per-line": [
      "error",
      "always"
    ],

    /* require or disallow assignment operator shorthand where possible */
    "operator-assignment": "error",

    /* enforce consistent linebreak style for operators */
    "operator-linebreak": [
      "error",
      "before"
    ],

    /* require or disallow padding within blocks */
    "padded-blocks": [
      "error",
      "never"
    ],
    "padding-line-between-statements": [/* require or disallow padding lines between statements */
      "error",
      { // always after variables
        "blankLine":"always",
        "prev": [
          "const",
          "let",
          "var"
        ],
        "next": "*"
      },
      { // ignore consecutive variables
        "blankLine": "any",
        "prev": [
          "const",
          "let",
          "var"
        ],
        "next": [
          "const",
          "let",
          "var"
        ]
      },
      { // ignore break, continue, return
        "blankLine": "any",
        "prev": "*",
        "next": [
          "break",
          "continue",
          "return"
        ]
      },
      { // always after case, default
        "blankLine": "always",
        "prev": [
          "case",
          "default"
        ],
        "next": "*"
      },
      { // always before
        "blankLine": "always",
        "prev": "*",
        "next": [
          "block",
          "block-like",
          "class",
          "debugger",
          "do",
          "for",
          "function",
          "if",
          "iife",
          "switch",
          "try",
          "while"
        ]
      },
      { // always after
        "blankLine": "always",
        "prev": [
          "block",
          "block-like",
          "class",
          "debugger",
          "do",
          "expression",
          "for",
          "function",
          "if",
          "iife",
          "switch",
          "try",
          "while"
        ],
        "next": "*"
      },
      { // ignore consecutive expressions
        "blankLine": "any",
        "prev": [ "expression" ],
        "next": [ "expression" ]
      },
      { // always after imports
        "blankLine": "always",
        "prev": [
          "cjs-import",
          "import"
        ],
        "next": "*"
      },
      { // ignore consecutive imports
        "blankLine": "any",
        "prev": [
          "cjs-import",
          "import"
        ],
        "next": [
          "cjs-import",
          "import"
        ]
      },
      { // always before exports
        "blankLine": "always",
        "prev": "*",
        "next": [
          "cjs-export",
          "export"
        ]
      },
      { // ignore consecutive exports
        "blankLine": "any",
        "prev": [
          "cjs-export",
          "export"
        ],
        "next": [
          "cjs-export",
          "export"
        ]
      },
      { // after directive prologues
        "blankLine": "always",
        "prev": "directive",
        "next": "*"
      },
      { // ignore consecutive directive prologues
        "blankLine": "any",
        "prev": "directive",
        "next": "directive"
      }
    ],

    /* disallow the use of `Math.pow` in favor of the `**` operator */
    "prefer-exponentiation-operator": "error",

    /* disallow using Object.assign with an object literal as the first argument and prefer the use of object spread instead. */
    "prefer-object-spread": "error",
    "quote-props": [
      "error",
      "as-needed",
      { "numbers": true }
    ],

    /* enforce the consistent use of either backticks, double, or single quotes */
    "quotes": [
      "error",
      "single",
      { "avoidEscape": true }
    ],

    /* require or disallow semicolons instead of ASI */
    "semi": "error",

    /* enforce consistent spacing before and after semicolons */
    "semi-spacing": "error",

    /* enforce location of semicolons */
    "semi-style": "error",

    /* require object keys to be sorted */
    "sort-keys": [
      "error",
      "asc",
      { "natural": true }
    ],

    /* require variables within the same declaration block to be sorted */
    "sort-vars": "error",

    /* enforce consistent spacing before blocks */
    "space-before-blocks": "error",

    /* enforce consistent spacing before `function` definition opening parenthesis */
    "space-before-function-paren": [
      "error",
      {
        "anonymous": "never",
        "named": "never",
        "asyncArrow": "always"
      }
    ],

    /* enforce consistent spacing inside parentheses */
    "space-in-parens": [
      "error",
      "always"
    ],

    /* require spacing around infix operators */
    "space-infix-ops": "error",

    /* enforce consistent spacing before or after unary operators */
    "space-unary-ops": "error",

    /* enforce consistent spacing after the `//` or `/*` in a comment */
    "spaced-comment": [
      "error",
      "always"
    ],

    /* enforce spacing around colons of switch statements */
    "switch-colon-spacing": "error",

    /* require or disallow spacing between template tags and their literals */
    "template-tag-spacing": "error",

    /* require or disallow Unicode byte order mark (BOM) */
    "unicode-bom": "off",

    /* require parenthesis around regex literals */
    "wrap-regex": "error"
  }
}
