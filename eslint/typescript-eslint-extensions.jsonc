{
  "rules": {
    /* typescript-eslint:recommended */
    // "no-array-constructor": "off",
    // "@typescript-eslint/no-array-constructor": "error",							/* disallow generic Array constructors */
    // "no-extra-semi": "off",
    // "@typescript-eslint/no-extra-semi": "error",											/* disallow unnecessary semicolons */

    /* typescript-eslint:recommended-requiring-type-checking */
    // "no-implied-eval": "off",
    // "@typescript-eslint/no-implied-eval": "error",										/* disallow the use of eval()-like methods */
    // "require-await": "off",
    // "@typescript-eslint/require-await": "error",											/* disallow async functions which have no await expression */

    "brace-style": "off",
    "@typescript-eslint/brace-style": [																	/* enforce consistent brace style for blocks */
      "error",
      "1tbs",
      { "allowSingleLine": true }
    ],
    "comma-dangle": "off",
    "@typescript-eslint/comma-dangle": [																/* require or disallow trailing commas */
      "error",
      "never"
    ],
    "comma-spacing": "off",
    "@typescript-eslint/comma-spacing": "error",												/* enforces consistent spacing before and after commas */
    "default-param-last": "off",
    "@typescript-eslint/default-param-last": "error",										/* enforce default parameters to be last */
    "dot-notation": "off",
    "@typescript-eslint/dot-notation": "error",													/* enforce dot notation whenever possible */
    "func-call-spacing": "off",
    "@typescript-eslint/func-call-spacing": "error",										/* require or disallow spacing between function identifiers and their invocations */
    "indent": "off",
    "@typescript-eslint/indent": [																			/* enforce consistent indentation */
      "error",
      2,
      {
        "SwitchCase": 1,
        "VariableDeclarator": {
          "var": 2,
          "let": 2,
          "const": 3
        },
        "offsetTernaryExpressions": true // doesn't seem to be working
      }
    ],
    "@typescript-eslint/init-declarations": "off",											/* require or disallow initialization in variable declarations */
    "keyword-spacing": "off",
    "@typescript-eslint/keyword-spacing": "error",											/* enforce consistent spacing before and after keywords */
    "lines-between-class-members": "off",
    "@typescript-eslint/lines-between-class-members":  [								/* require or disallow an empty line between class members */
      "error",
      "always"
    ],
    "no-dupe-class-members": "off",
    "@typescript-eslint/no-dupe-class-members": "error",								/* disallow duplicate class members */
    "no-duplicate-imports": "off",
    "@typescript-eslint/no-duplicate-imports": [												/* disallow duplicate module imports */
      "error",
      { "includeExports": true }
    ],
    "no-empty-functions": "off",
    "@typescript-eslint/no-empty-function": [														/* disallow empty functions */
      "error",
      {
        "allow": [
          "constructors",
          "private-constructors",
          "protected-constructors"
        ]
      }
    ],
    "no-extra-parens": "off",
    "@typescript-eslint/no-extra-parens": [															/* disallow unnecessary parentheses */
      "error",
      "all",
      {
        "ignoreJSX": "multi-line",
        "nestedBinaryExpressions": false,
        "enforceForArrowConditionals": false,
        "enforceForSequenceExpressions": false
      }
    ],
    "no-invalid-this": "off",
    "@typescript-eslint/no-invalid-this": "error",											/* disallow this keywords outside of classes or class-like objects */
    "no-loop-func": "off",
    "@typescript-eslint/no-loop-func": "error",													/* disallow function declarations that contain unsafe references inside loop statements */
    "no-loss-of-precision": "off",
    "@typescript-eslint/no-loss-of-precision": "error",									/* disallow literal numbers that lose precision */
    "no-magic-numbers": "off",
    "@typescript-eslint/no-magic-numbers": "off",												/* disallow magic numbers */
    "no-redeclare": "off",
    "@typescript-eslint/no-redeclare": "error",													/* disallow variable redeclaration */
    "no-shadow": "off",
    "@typescript-eslint/no-shadow": [																		/* disallow variable declarations from shadowing variables declared in the outer scope */
      "error",
      {
        "builtinGlobals": true,
        "hoist": "all"
      }
    ],
    "no-throw-literal": "off",
    "@typescript-eslint/no-throw-literal": "off",												/* disallow throwing literals as exceptions */
    "no-unused-expressions": "off",
    "@typescript-eslint/no-unused-expressions": "error",								/* disallow unused expressions */
    "no-unused-vars": "off",
    "@typescript-eslint/no-unused-vars": "error",										    /* disallow unused variables */
    "no-use-before-define": "off",
    "@typescript-eslint/no-use-before-define": "error",									/* disallow the use of variables before they are defined */
    "no-useless-constructor": "off",
    "@typescript-eslint/no-useless-constructor": "error",								/* disallow unnecessary constructors */
    "object-curly-spacing": "off",
    "@typescript-eslint/object-curly-spacing": [												/* enforce consistent spacing inside braces */
      "error",
      "always"
    ],
    "quotes": "off",
    "@typescript-eslint/quotes": [												          		/* enforce the consistent use of either backticks, double, or single quotes */
      "error",
      "single",
      { "avoidEscape": true }
    ],
    "return-await": "off",
    "@typescript-eslint/return-await": "error",													/* enforces consistent returning of awaited values */
    "semi": "off",
    "@typescript-eslint/semi": "error",																	/* require or disallow semicolons instead of ASI */
    "space-before-function-paren": "off",
    "@typescript-eslint/space-before-function-paren": [									/* 	enforce consistent spacing before `function` definition opening parenthesis */
      "error",
      {
        "anonymous": "never",
        "named": "never",
        "asyncArrow": "always"
      }
    ],
    "space-infix-ops": "off",
    "@typescript-eslint/space-infix-ops": "error"												/* this rule is aimed at ensuring there are spaces around infix operators */
  }
}