{
  "root": true,
  "env": {
    "browser": true,
    "es2021": true,
    "node": true,
    "jest": true
  },
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 2021,
    "project": "./tsconfig.json",
    "sourceType": "module"
  },
  "plugins": [
    "@typescript-eslint"
  ],
  "extends": [
    "eslint:recommended", // https://github.com/eslint/eslint/blob/master/conf/eslint-recommended.js
    "./eslint/possible-errors.jsonc",
    "./eslint/best-practices.jsonc",
    "./eslint/strict-mode.jsonc",
    "./eslint/variables.jsonc",
    "./eslint/stylistic-issues.jsonc",
    "./eslint/es6.jsonc"
  ],
  "rules": {

  },
  "overrides": [
    {
      "files": [ "**/*.{ts,tsx}" ],
      "extends": [
        "plugin:@typescript-eslint/eslint-recommended", // https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/src/configs/eslint-recommended.ts
        "plugin:@typescript-eslint/recommended", // https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/src/configs/recommended.ts
        "plugin:@typescript-eslint/recommended-requiring-type-checking", // https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/src/configs/recommended-requiring-type-checking.ts
        "./eslint/typescript-eslint.jsonc",
        "./eslint/typescript-eslint-extensions.jsonc"
      ],
      "rules": {
        /* typescript-eslint/eslint-recommended */
        // "constructor-super": "off",										/* require `super()` calls in constructors */
        // "getter-return": "off",												/* enforce `return` statements in getters */
        // "no-const-assign": "off",											/* disallow reassigning `const` variables */
        // "no-dupe-args": "off",													/* disallow duplicate arguments in `function` definitions */
        // "no-dupe-class-members": "off",								/* disallow duplicate class members */
        // "no-dupe-keys": "off",													/* disallow duplicate keys in object literals */
        // "no-func-assign": "off",												/* disallow reassigning `function` declarations */
        // "no-import-assign": "off",											/* disallow assigning to imported bindings */
        // "no-new-symbol": "off",												/* disallow `new` operators with the `Symbol` object */
        // "no-obj-calls": "off",													/* disallow calling global object properties as functions */
        // "no-redeclare": "off",													/* disallow variable redeclaration */
        // "no-setter-return": "off",											/* disallow returning values from setters */
        // "no-this-before-super": "off",									/* disallow `this`/`super` before calling `super()` in constructors */
        // "no-undef": "off",															/* disallow the use of undeclared variables unless mentioned in `/*global */` comments */
        // "no-unreachable": "off",												/* disallow unreachable code after `return`, `throw`, `continue`, and `break` statements */
        // "no-unsafe-negation": "off",										/* disallow negating the left operand of relational operators */
        // "no-var": "error",															/* require `let` or `const` instead of `var` */
        // "prefer-const": "error",												/* require `const` declarations for variables that are never reassigned after declared */
        // "prefer-rest-params": "error",									/* require rest parameters instead of `arguments` */
        // "prefer-spread": "error",											/* require spread operators instead of `.apply()` */
        // "valid-typeof": "off",													/* enforce comparing `typeof` expressions against valid strings */
      }
    }
  ]
}