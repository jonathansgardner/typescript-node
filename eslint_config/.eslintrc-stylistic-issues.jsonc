{
	"rules": {
		/* eslint:recommended */
		// "no-mixed-spaces-and-tabs": "error",						/* disallow mixed spaces and tabs for indentation */

		"array-bracket-newline": [												/* enforce linebreaks after opening and before closing array brackets */
			"error",
			{ "multiline": true }
		],
		"array-bracket-spacing": [												/* enforce consistent spacing inside array brackets */
			"error",
			"always"
		],
		"array-element-newline": [												/* enforce line breaks after each array element */
			"error",
			{
				"multiline": true,
				"minItems": 3
			}
		],
		"block-spacing": "error",													/* disallow or enforce spaces inside of blocks after opening block and before closing block */
		"brace-style": [																	/* enforce consistent brace style for blocks */
			"error",
			"1tbs",
			{ "allowSingleLine": true }
		],
		"camelcase": "error",															/* enforce camelcase naming convention */
		"comma-dangle": [																	/* enforce or disallow capitalization of the first letter of a comment */
			"error",
			"never"
		],
		"comma-spacing": "error",													/* Enforces spacing around commas */
		"comma-style": "error",														/* enforce consistent comma style */
		"computed-property-spacing": [										/* enforce consistent spacing inside computed property brackets */
			"error",
			"always"
		],
		"consistent-this": "off",													/* enforce consistent naming when capturing the current execution context */
		"eol-last": "error",															/* require or disallow newline at the end of files */
		"func-call-spacing": "error",											/* require or disallow spacing between function identifiers and their invocations */
		"func-name-matching": [														/* require function names to match the name of the variable or property to which they are assigned */
			"error",
			{
				"considerPropertyDescriptor": true,
				"includeCommonJSModuleExports": true
			}
		],
		"func-names": "off",															/* require or disallow named `function` expressions */
		"func-style": [																		/* enforce the consistent use of either `function` declarations or expressions */
			"error",
			"declaration",
			{ "allowArrowFunctions": true }
		],
		"function-call-argument-newline": [								/* enforce line breaks between arguments of a function call */
			"error",
			"consistent"
		],
		"function-paren-newline": [												/* enforce consistent line breaks inside function parentheses */
			"error",
			"multiline-arguments"
		],
		"id-denylist": "off",															/* disallow specified identifiers */
		"id-length": "off",																/* enforce minimum and maximum identifier lengths */
		"id-match": "off",																/* require identifiers to match a specified regular expression */
		"implicit-arrow-linebreak": "error",							/* enforce the location of arrow function bodies */
		"indent": [																				/* enforce consistent indentation */
			"error",
			"tab",
			{
				"SwitchCase": 1,
				"VariableDeclarator": {
					"var": 2,
					"let": 2,
					"const": 3
				},
				"offsetTernaryExpressions": true // doesn't seem to be working
			}
		],
		"jsx-quotes": "error",														/* enforce the consistent use of either double or single quotes in JSX attributes */
		"key-spacing": [																	/* enforce consistent spacing before and after keywords */
			"error",
			{ "mode": "strict" }
		],
		"keyword-spacing": "error",												/* enforce consistent spacing before and after keywords */
		"line-comment-position": "off",										/* enforce position of line comments */
		"linebreak-style": [															/* enforce consistent linebreak style */
			"error",
			"unix"
		],
		"lines-around-comment": [													/* require empty lines around comments */
			"error",
			{
				"allowBlockStart": true,
				"allowClassStart": true,
				"allowObjectStart": true,
				"allowArrayStart": true
			}
		],
		"lines-between-class-members": "error",						/* require or disallow an empty line between class members */
		"max-depth": "warn",															/* enforce a maximum depth that blocks can be nested */
		"max-len": [																			/* enforce a maximum line length */
			"error",
			{
				"ignoreUrls": true,
				"ignoreStrings": true,
				"ignoreTemplateLiterals": true,
				"ignoreRegExpLiterals": true
			}
		],
		"max-lines": "off",																/* enforce a maximum number of lines per file */
		"max-lines-per-function": "off",									/* enforce a maximum number of lines of code in a function */
		"max-nested-callbacks": "off",										/* enforce a maximum depth that callbacks can be nested */
		"max-params": [																		/* enforce a maximum number of parameters in function definitions */
			"error",
			3
		],
		"max-statements": "off",													/* enforce a maximum number of statements allowed in function blocks */
		"max-statements-per-line": "error",								/* enforce a maximum number of statements allowed per line */
		"multiline-comment-style": [											/* enforce a particular style for multiline comments */
			"error",
			"separate-lines"
		],
		"multiline-ternary": [														/* enforce newlines between operands of ternary expressions */
			"error",
			"always-multiline"
		],
		"new-cap": "error",																/* require constructor names to begin with a capital letter */
		"new-parens": "error",														/* enforce or disallow parentheses when invoking a constructor with no arguments */
		"newline-per-chained-call": [											/* require a newline after each call in a method chain */
			"error",
			{ "ignoreChainWithDepth": 2 }
		],
		"no-array-constructor": "error",									/* disallow `Array` constructors */
		"no-bitwise": "off",															/* disallow bitwise operators */
		"no-continue": "off",															/* disallow `continue` statements */
		"no-inline-comments": "off",											/* disallow inline comments after code */
		"no-lonely-if": "error",													/* disallow `if` statements as the only statement in `else` blocks */
		"no-mixed-operators": "error",										/* disallow mixed binary operators */
		"no-multi-assign": "error",												/* disallow use of chained assignment expressions */
		"no-multiple-empty-lines": [											/* disallow multiple empty lines */
			"error",
			{
				"max": 1,
				"maxBOF": 0
			}
		],
		"no-negated-condition": "warn",										/* disallow negated conditions */
		"no-nested-ternary": "off",												/* disallow nested ternary expressions */
		"no-new-object": "error",													/* disallow `Object` constructors */
		"no-plusplus": "off",															/* disallow the unary operators `++` and `--` */
		"no-restricted-syntax": "off",										/* disallow specified syntax */
		"no-tabs": "off",																	/* disallow all tabs */
		"no-ternary": "off",															/* disallow ternary operators */
		"no-trailing-spaces": "error",										/* disallow trailing whitespace at the end of lines */
		"no-underscore-dangle": [
			"error",
			{ "enforceInMethodNames": true }								/* disallow dangling underscores in identifiers */
		],
		"no-unneeded-ternary": [													/* disallow ternary operators when simpler alternatives exist */
			"error",
			{ "defaultAssignment": false }
		],
		"no-whitespace-before-property": "error",					/* disallow whitespace before properties */
		"nonblock-statement-body-position": "error",			/* enforce the location of single-line statements */
		"object-curly-newline": [													/* enforce consistent line breaks after opening and before closing braces */
			"error",
			{ "multiline": true }
		],
		"object-curly-spacing": [													/* enforce consistent spacing inside braces */
			"error",
			"always"
		],
		"object-property-newline": [											/* enforce placing object properties on separate lines */
			"error",
			{ "allowAllPropertiesOnSameLine": true }
		],
		"one-var": [																			/* enforce variables to be declared either together or separately in functions */
			"error",
			{
				"var": "consecutive",
				"let": "consecutive",
				"const": "consecutive",
				"separateRequires": true
			}
		],
		"one-var-declaration-per-line": [									/* 	require or disallow newlines around variable declarations */
			"error",
			"always"
		],
		"operator-assignment": "error",										/* require or disallow assignment operator shorthand where possible */
		"operator-linebreak": [														/* enforce consistent linebreak style for operators */
			"error",
			"before"
		],
		"padded-blocks": [																/* require or disallow padding within blocks */
			"error",
			"never"
		],
		"padding-line-between-statements": [							/* require or disallow padding lines between statements */
			"error",
			{ // always after variables
				"blankLine":"always",
				"prev": [
					"const",
					"let",
					"var"
				],
				"next": "*"
			},
			{ // ignore consecutive variables
				"blankLine": "any",
				"prev": [
					"const",
					"let",
					"var"
				],
				"next": [
					"const",
					"let",
					"var"
				]
			},
			{ // ignore break, continue, return
				"blankLine": "any",
				"prev": "*",
				"next": [
					"break",
					"continue",
					"return"
				]
			},
			{ // always after case, default
				"blankLine": "always",
				"prev": [
					"case",
					"default"
				],
				"next": "*"
			},
			{ // always before
				"blankLine": "always",
				"prev": "*",
				"next": [
					"block",
					"block-like",
					"class",
					"debugger",
					"do",
					"for",
					"function",
					"if",
					"iife",
					"switch",
					"try",
					"while"
				]
			},
			{ // always after
				"blankLine": "always",
				"prev": [
					"block",
					"block-like",
					"class",
					"debugger",
					"do",
					"expression",
					"for",
					"function",
					"if",
					"iife",
					"switch",
					"try",
					"while"
				],
				"next": "*"
			},
			{ // ignore consecutive expressions
				"blankLine": "any",
				"prev": [ "expression" ],
				"next": [ "expression" ]
			},
			{ // always after imports
				"blankLine": "always",
				"prev": [
					"cjs-import",
					"import"
				],
				"next": "*"
			},
			{ // ignore consecutive imports
				"blankLine": "any",
				"prev": [
					"cjs-import",
					"import"
				],
				"next": [
					"cjs-import",
					"import"
				]
			},
			{ // always before exports
				"blankLine": "always",
				"prev": "*",
				"next": [
					"cjs-export",
					"export"
				]
			},
			{ // ignore consecutive exports
				"blankLine": "any",
				"prev": [
					"cjs-export",
					"export"
				],
				"next": [
					"cjs-export",
					"export"
				]
			},
			{ // after directive prologues
				"blankLine": "always",
				"prev": "directive",
				"next": "*"
			},
			{ // ignore consecutive directive prologues
				"blankLine": "any",
				"prev": "directive",
				"next": "directive"
			}
		],
		"prefer-exponentiation-operator": "error",				/* disallow the use of `Math.pow` in favor of the `**` operator */
		"prefer-object-spread": "error",									/* disallow using Object.assign with an object literal as the first argument and prefer the use of object spread instead. */
		"quote-props": [												          /* require quotes around object literal property names */
			"error",
			"as-needed",
			{ "numbers": true }
		],
		"quotes": [												          			/* enforce the consistent use of either backticks, double, or single quotes */
			"error",
			"single",
			{ "avoidEscape": true }
		],
		"semi": [												          				/* require or disallow semicolons instead of ASI */
			"error",
			"always",
			{ "omitLastInOneLineBlock": true }
		],
		"semi-spacing": "error",												  /* enforce consistent spacing before and after semicolons */
		"semi-style": "error",												  	/* enforce location of semicolons */
		"sort-keys": [																		/* 	require object keys to be sorted */
			"error",
			"asc",
			{ "natural": true }
		],
		"sort-vars": "error",															/* require variables within the same declaration block to be sorted */
		"space-before-blocks": "error",										/* enforce consistent spacing before blocks */
		"space-before-function-paren": [									/* 	enforce consistent spacing before `function` definition opening parenthesis */
			"error",
			{
				"anonymous": "never",
				"named": "never",
				"asyncArrow": "always"
			}
		],
		"space-in-parens": [												  		/* enforce consistent spacing inside parentheses */
			"error",
			"always"
		],
		"space-infix-ops": "error",												/* require spacing around infix operators */
		"space-unary-ops": "error",												/* enforce consistent spacing before or after unary operators */
		"spaced-comment": [												  			/* enforce consistent spacing after the `//` or `/*` in a comment */
			"error",
			"always"
		],
		"switch-colon-spacing": "error",									/* enforce spacing around colons of switch statements */
		"template-tag-spacing": "error",									/* require or disallow spacing between template tags and their literals */
		"unicode-bom": "off",															/* require or disallow Unicode byte order mark (BOM) */
		"wrap-regex": "error"															/* require parenthesis around regex literals */
	}
}